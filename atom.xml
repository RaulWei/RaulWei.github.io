<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RaulWei&#39;s</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-14T15:52:45.132Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RaulWei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>稍微6一点的IDEA玩法</title>
    <link href="http://yoursite.com/2017/08/26/%E7%A8%8D%E5%BE%AE6%E4%B8%80%E7%82%B9%E7%9A%84IDEA%E7%8E%A9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/08/26/稍微6一点的IDEA玩法/</id>
    <published>2017-08-25T16:09:34.000Z</published>
    <updated>2017-09-14T15:52:45.132Z</updated>
    
    <content type="html"><![CDATA[<p>一开始进组对什么都不熟悉，乖乖地按照新人手册搭环境，跑项目，到如今也有一个多月了，别别扭扭地用了这么久eclipse，终于在这周换了IDEA。两个字，真爽！太他妈智能了！代码自己蹭蹭地往外冒，感觉都不用自己写了。其实以前也用过一段时间IDEA，但是学生嘛，写点玩具项目，也没什么需求接触IDEA的各种功能。那天看到凯哥一顿行云流水的操作，很眼馋，于是决定挖掘和记录一下IDEA在工作中比较常用的功能快捷键，希望可以帮助提升工作效率和体验。</p>
<h3 id="设置相关"><a href="#设置相关" class="headerlink" title="设置相关"></a>设置相关</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt + Ctrl + s</td>
<td>打开Settings</td>
</tr>
<tr>
<td>Alt + Ctrl + Shift + s</td>
<td>打开Project Structure，也可以先选中Project，再按F4，效果一样</td>
</tr>
</tbody>
</table>
<h3 id="搜索相关"><a href="#搜索相关" class="headerlink" title="搜索相关"></a>搜索相关</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + e</td>
<td>找到最近访问的文件</td>
</tr>
<tr>
<td>Ctrl + Shift + e</td>
<td>找到最近编辑的文件</td>
</tr>
<tr>
<td>Ctrl + Click</td>
<td>跳转到对应的源码声明中去</td>
</tr>
<tr>
<td>Ctrl + Alt + Click</td>
<td>跳转到对应的源码实现中去</td>
</tr>
<tr>
<td>Double Shift</td>
<td>弹出搜索框，根据类名寻找类，或根据资源名寻找资源，或根据<code>/文件夹名</code>寻找文件夹</td>
</tr>
<tr>
<td>Ctrl + Shift + A</td>
<td>调出<code>Enter action or option name</code>，帮助搜索行为，如搜<code>REST Client</code>可调用它</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>悬浮显示该类的Structure，如果记得方法名，想跳转过去，可直接在焦点位于悬浮窗时输入，匹配后回车，贼方便</td>
</tr>
</tbody>
</table>
<h3 id="编辑相关"><a href="#编辑相关" class="headerlink" title="编辑相关"></a>编辑相关</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Shift + Enter</td>
<td>在行中任意位置执行此快捷键，可另起一行，并跳转过去</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>在行中任意位置执行此快捷键，可快速补全行尾分号</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>重命名类、方法、变量</td>
</tr>
<tr>
<td>Ctrl + Shift + z</td>
<td>取消撤销</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>可以选择自动插入构造器、getter、setter等</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>可以选择提示的建议来优化代码</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始进组对什么都不熟悉，乖乖地按照新人手册搭环境，跑项目，到如今也有一个多月了，别别扭扭地用了这么久eclipse，终于在这周换了IDEA。两个字，真爽！太他妈智能了！代码自己蹭蹭地往外冒，感觉都不用自己写了。其实以前也用过一段时间IDEA，但是学生嘛，写点玩具项目，也没
    
    </summary>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Bootcamp也结束了</title>
    <link href="http://yoursite.com/2017/07/17/Bootcamp%E4%B9%9F%E7%BB%93%E6%9D%9F%E4%BA%86/"/>
    <id>http://yoursite.com/2017/07/17/Bootcamp也结束了/</id>
    <published>2017-07-16T16:28:05.000Z</published>
    <updated>2017-07-30T16:37:13.221Z</updated>
    
    <content type="html"><![CDATA[<p>正式进组干活之前，大概有一个月的时间，给我们学习一些必要技术，这个过程就是Bootcamp。Bootcamp期间，根据wiki完成practice，有信心了就可以申请exam，通过了就ok了。上海office成员会直接跳过basic阶段，去完成intermediate，如果这其中有什么基础知识方面的困惑，可以回过头去查basic wiki。Intermediate包括三个部分，前端的<code>Google Closure</code>和后端的<code>Java Web</code>以及<code>Elastic Search</code>。</p>
<h2 id="Client-Side"><a href="#Client-Side" class="headerlink" title="Client Side"></a>Client Side</h2><p>Client Side做了一个半礼拜，主要是基于Google Closure实现一个纯前端的Web Editor，后端是mock的。其实就其功能而言，用jQuery甚至是纯JavaScript实现起来都算不上难，难就难在必须使用Closure。Google Closure算是一款略小众的前端框架了，大家基本上对Closure都没有使用经验，学起来都比较陡峭，再加上有限的时间，这就使得我们必须快速掌握Closure的基本用法，还要一点很重要，就是要找到一个靠谱的解决疑问和bug的方式。<br>网络上关于Google Closure的资料并不多，主要啃它的官方文档以及API库，官方文档写的是真不错，很容易就上手了，但是想要完成更复杂的任务，仍然不太容易。学习完官方文档对Closure有一个初步认知后，再跟着Practice完成一个Demo。Practice真是又臭又长，但幸运的是静下心来学习完收获很大，其实最重要的是掌握其自定义事件声明、参数传递、触发以及异步处理，熟悉了以上这些，再加上exam的整体结构框架都写好了，基本上通过exam没有大问题了。</p>
<h2 id="Server-Side"><a href="#Server-Side" class="headerlink" title="Server Side"></a>Server Side</h2><p>个人认为这是Bootcamp最难的一块，幸亏有大佬的源码和步骤解析，不然我不知道要猴年马月才能通过呢。其实能感觉到，这块对于有一定Java Web开发经验的人来讲也算不上难，但是对于我这样的Java新手而言，突如其来的各种Java生态圈的框架、库、特性，我完全一脑子浆糊，不知从何入手。教程上略过的常识性知识，往往会成为我失败的关键点。幸运的是，有一点比研究生阶段好，那就是大家都干同一件事，有问题可以找人问，找大佬带，不再是自己一个人干到底，大家讨论互助，这事儿差不多就成了。<br>通过向大佬请教，向Google提问，在短短一周之内，我一个彻彻底底的Java小白，学习并熟悉了Java 8的Lambda和Stream的使用，Spring的基本结构与配置，注解的装配，请求的处理过程，Tomcat及Maven的基础使用，JDBCTemplate连接数据库相关方法，Cassandra基础及API方法等等。在参考了大佬源码的基础之上，磕磕绊绊把工程缺漏的代码补上并运行成功。心里稍微遗憾的是没能完全自主独立通过exam，如果能跳出舒适区，顶着压力提起勇气迎难而上，完完全全靠自己pass，想必会有另一番收获体会和成就感。</p>
<h2 id="Elastic-Search"><a href="#Elastic-Search" class="headerlink" title="Elastic Search"></a>Elastic Search</h2><p>相对来讲，Elastic Search比前两个exam要稍微简单一些，一方面是知识点比较集中，另一方面是exam的代码量少。Practice中关于Elastic Search的介绍讲的比较清晰了，后来发现似乎是从官方文档中摘取的。果然，官方文档才是最清晰最容易上手的，因此一定要学好英语，读懂官文比野鸡博客高明许多。Bootcamp中关于Elastic Search的重点主要包括两方面，一个是query，再一个是aggregation，从这两个维度深挖基本上就掌握了Elastic Search核心的70%。不过仅仅通过Bootcamp是远远不够的，无论是深度和广度都差得远，在之后的工作中还是得反复咀嚼，力求对几个常用框架有自己的理解。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上，就是将近一个月Bootcamp的学习内容，实际上这个月有点松懈了，除了做Bootcamp以外并没有执行自己的学习计划，原本打算7月份完成的自学任务没有完成，8月开始正式进组干活后属于自己的时间就更少了。人还是应该居安思危，给自己制造一些紧迫感，逼自己努力前进，不然就真的温水煮青蛙了，浪费一天，浪费两天，渐渐地，一年两年，我就毁了。还是赶快move on，免得未来后悔。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正式进组干活之前，大概有一个月的时间，给我们学习一些必要技术，这个过程就是Bootcamp。Bootcamp期间，根据wiki完成practice，有信心了就可以申请exam，通过了就ok了。上海office成员会直接跳过basic阶段，去完成intermediate，如果
    
    </summary>
    
      <category term="Work" scheme="http://yoursite.com/categories/Work/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="WAP" scheme="http://yoursite.com/tags/WAP/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的尾递归怎么优化</title>
    <link href="http://yoursite.com/2017/06/26/JavaScript%E7%9A%84%E5%B0%BE%E9%80%92%E5%BD%92%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2017/06/26/JavaScript的尾递归怎么优化/</id>
    <published>2017-06-26T15:28:41.000Z</published>
    <updated>2017-07-08T14:46:02.752Z</updated>
    
    <content type="html"><![CDATA[<p>这两天项目轻松点，抽空在刷阮一峰大佬的《ES6标准入门》，其中<code>尾调用优化</code>一节相当牛逼，且具有一定挑战性和启发性，故此开一篇博客，抄袭、总结、思考一番。这篇博文的整体行文架构将十分厚颜无耻地直接抄袭自阮大佬，章节标题之下会有一些自己的总结，针对一些难以理解的概念、代码，将一定程度展开讨论，争取形成一篇未必有干货但铁定有私货的文章。</p>
<h2 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h2><p>要谈<code>尾递归</code>，先说<code>尾调用</code>，英文名字是<code>Tail Call</code>。什么是<code>尾调用</code>？大佬说了，就是指某个函数的最后一步是调用另一个函数！这里的最后一步是指实际执行过程中的最后一步，不一定是从代码上看到的函数末尾。<br>看几个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 情况一</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> y = g(x);</div><div class="line">    <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 函数调用之后还有赋值操作，它不是最后一步，因此它不属于尾调用</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 情况二</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> g(x) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 函数调用之后还有求和操作，它不是最后一步，因此它不属于尾调用</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 情况三</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    g(x);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 看起来贼像，但是实际上它等价于下面的代码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    g(x);</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 函数调用之后还有return操作，它不是最后一步，因此它不属于尾调用</span></div></pre></td></tr></table></figure>
<h2 id="尾调用的优化"><a href="#尾调用的优化" class="headerlink" title="尾调用的优化"></a>尾调用的优化</h2><p>函数调用的时候会在内存保存调用位置和内部变量等“现场”信息，以便函数调用完毕恢复“现场”，这里的“现场”用更专业的叫法是<code>调动帧</code>。如果A调用B，B调用C，那么A的<code>调用帧</code>嵌套B的<code>调用帧</code>再嵌套C的<code>调用帧</code>，形成了<code>调用栈</code>，如果调用过深，要保存的信息太多，栈爆了，就是栈溢出。<br>所以通常刷题的时候写递归很容易炸，改成循环就好了。如果非要用递归，怎么优化？后面会讲。先看<code>尾调用</code>，执行引擎是聪明的，它知道<code>尾调用</code>是函数的最后一步操作，也就是说程序转向函数之后不会再回来了，那还保存个鸟的现场，因此它会用内层函数的<code>调用帧</code>直接替换外层函数，不会形成<code>调用栈</code>。这样一来，不管调用多少层，都不可能出现栈溢出。<br>有个前提是<code>尾调用</code>的函数和外层函数是相对独立的，下面这个例子就没法优化，因为内部函数用到了外层函数的内部变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOne</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> one = <span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> b + one;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> inner(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>如果<code>尾调用</code>调用的是自身，就称为<code>尾递归</code>。ES6第一次明确规定，所有ECMAScript的实现都必须部署<code>尾递归优化</code>，因此我们尽量在编码时把递归写成<code>尾递归</code>的形式，大部分引擎会帮我们优化，省了大量内存空间。<br>怎么写<code>尾递归</code>？有套路。请看下面的阶乘函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 改写前</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 改写后</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</div><div class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</div><div class="line">&#125;</div><div class="line">factorial(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></div></pre></td></tr></table></figure>
<p>可以总结出，改写成尾递归的奥义在于将内部变量改写成参数！掌握这个套路，这类问题可解。再来个例子验证。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 改写前</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 改写后</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci2</span> (<span class="params">n , ac1 = <span class="number">1</span> , ac2 = <span class="number">1</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)	<span class="keyword">return</span> ac2;</div><div class="line">    <span class="keyword">return</span> Fibonacci2 (n - <span class="number">1</span>, ac2, ac1 + ac2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，经过这样的改写之后，不够直观，对于代码的可读性有所影响，为解决这个问题，通常的做法是外面再包一层，例如对阶乘函数包装之后，变成下面这样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tailFactorial</span>(<span class="params">n, total</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</div><div class="line">    <span class="keyword">return</span> tailFactorial(n - <span class="number">1</span>, n * total);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> tailFactorial(n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></div></pre></td></tr></table></figure>
<p>调用者只顾调<code>factorial</code>，不用管内部实现，它看到的<code>factorial(n)</code>是非常符合逻辑的。在ES6下，有了<code>默认参数</code>特性，情况变的更加简单，如下。调用者不用关心第二个参数，只顾调用<code>factorial(n)</code>就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</div><div class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</div><div class="line">&#125;</div><div class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></div></pre></td></tr></table></figure>
<h2 id="尾递归优化的实现"><a href="#尾递归优化的实现" class="headerlink" title="尾递归优化的实现"></a>尾递归优化的实现</h2><p>ES6的尾调用优化只在严格模式下开启，正常模式无效。这是因为在正常模式下，每个函数内有两个隐藏的内部变量<code>arguments</code>和<code>caller</code>，用来跟踪函数调用栈。假设支持了<code>尾递归优化</code>，每次递归函数进来，当前<code>调用帧</code>替换原来的<code>调用帧</code>，就把<code>arguments</code>和<code>caller</code>覆盖了，从而无法跟踪调用栈，产生了矛盾。也就是说，<code>跟踪调用栈</code>和<code>尾递归优化</code>二者只能有一个存活，考虑到<code>arguments</code>和<code>caller</code>的设计目的本来就是为了跟踪调用栈，没理由为了<code>尾递归优化</code>而舍弃，因此，二者相权衡，还是决定在这种非严格模式下不进行<code>尾递归优化</code>。严格模式下则禁用了上述两个内部变量，<code>尾递归优化</code>得以顺利部署。</p>
<p>为了在正常模式下也能进行<code>尾递归优化</code>，我们可以自己实现呀。原理就是把递归改写成循环的形式，不就可以大大减少函数调用，从而节省了内存，避免栈溢出了吗？所以问题的关键在于如何将递归改写成循环。<br>我们以一个累加函数<code>sum</code>为例，参数<code>x</code>是基值，参数<code>y</code>是递归次数，我们尝试递归100000次，溢出了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// tail recursion without optimization</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> sum(x + <span class="number">1</span>, y - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">1000000</span>));	<span class="comment">// Maximum call stack size exceeded</span></div></pre></td></tr></table></figure>
<p>第一种方法，借助<code>蹦床函数(trampoline)</code>优化。首先，这种方法要求我们改变原函数的内部实现，把原来返回<code>函数调用</code>改为返回<code>函数</code>。如何返回<code>函数</code>？借助<code>bind</code>来实现。然后，定义一个<code>蹦床函数</code>，它接受一个函数<code>f</code>作为参数，然后在<code>蹦床</code>内执行函数<code>f</code>，如果<code>f</code>返回的还是函数，就继续执行，循环起来，直到<code>f</code>返回非函数，退出循环。<br>以<code>蹦床函数</code>的方式，我们成功实现了将递归改写成循环，但是，由于这种方法要求我们改写原函数内部实现，破坏了原函数逻辑，因此不是一种非常好的处理方式，我们玩玩就算了，引擎不会采用这么naive的写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// tail recursion optimization 1: tramponline</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tramponline</span>(<span class="params">f</span>) </span>&#123;</div><div class="line">    <span class="keyword">while</span> (f &amp;&amp; f <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</div><div class="line">        f = f();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> sum.bind(<span class="literal">null</span>, x + <span class="number">1</span>, y - <span class="number">1</span>);	<span class="comment">// return function!</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(tramponline(sum(<span class="number">1</span>, <span class="number">100000</span>)));</div></pre></td></tr></table></figure>
<p>第二种方法，是一种更牛逼的方法，可以在不改写原函数内部实现的基础上完成<code>尾递归优化</code>。其写法相当精妙，我感觉自己一辈子也写不出这样的代码。看起来挺复杂的，怎么分析？首先，我推演一下当前的<code>sum</code>变成了什么。原函数<code>sum</code>被当做参数传给了<code>tco</code>，<code>tco</code>的执行结果即<code>accumulator</code>赋值给当前<code>sum</code>，即<code>sum 最终= accumulator</code>，其中<code>accumulator</code>比原<code>sum</code>多了可控的<code>value</code>，<code>active</code>，<code>accumulated</code>变量。进入尾递归后，<code>active</code>被激活为<code>true</code>，因此从第二层递归开始，<code>sum</code>仅将<code>arguments</code>入栈，并不进入判断逻辑内就直接退出，返回给<code>value</code>是<code>undefined</code>，递归在第二层就截止。然而，由于每轮都会将<code>arguments</code>入栈，而每轮的循环条件是判断栈中元素是否为0，因此退出递归后会因循环条件重复进入函数，由此完成了用循环替代递归。最后一轮，函数直接将返回值给<code>value</code>且没有将<code>arguments</code>入栈，既退出递归也退出循环，至此结束。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// tail recursion optimization 2: tco</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tco</span>(<span class="params">f</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value;</div><div class="line">    <span class="keyword">var</span> active = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> accumulated = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">accumulator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        accumulated.push(<span class="built_in">arguments</span>);</div><div class="line">        <span class="keyword">if</span> (!active) &#123;</div><div class="line">            active = <span class="literal">true</span>; </div><div class="line">            <span class="keyword">while</span> (accumulated.length) &#123;</div><div class="line">                value = f.apply(<span class="keyword">this</span>, accumulated.shift());</div><div class="line">            &#125;</div><div class="line">            active = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = tco(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (y &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> sum(x + <span class="number">1</span>, y - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">100000</span>));</div></pre></td></tr></table></figure>
<p>多分析几遍源码，有点感觉了，这玩意有点像之前看的Python的装饰器实现。<code>tco</code>就是利用了装饰器的思想，在原<code>sum</code>的外头包裹了一层，只不过引入了<code>active</code>开关，它完全控制了程序执行的走向，牛逼。可能还是代码看的少，写的少，没有一下反应过来是装饰器。不过既然是装饰器，属于设计模式的一种，说白了就是前人的套路总结，这个不需要天赋，足够的积累即可熟能生巧的。因此，我还是有机会写出这样的代码，推翻了之前“此码只应天才写”的说法，看到了一点点希望，开心，逃 :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天项目轻松点，抽空在刷阮一峰大佬的《ES6标准入门》，其中&lt;code&gt;尾调用优化&lt;/code&gt;一节相当牛逼，且具有一定挑战性和启发性，故此开一篇博客，抄袭、总结、思考一番。这篇博文的整体行文架构将十分厚颜无耻地直接抄袭自阮大佬，章节标题之下会有一些自己的总结，针对一些难
    
    </summary>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>STM对我来讲是一种什么样的体验</title>
    <link href="http://yoursite.com/2017/06/21/STM%E5%AF%B9%E6%88%91%E6%9D%A5%E8%AE%B2%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2017/06/21/STM对我来讲是一种什么样的体验/</id>
    <published>2017-06-21T15:23:41.000Z</published>
    <updated>2017-06-26T15:21:08.194Z</updated>
    
    <content type="html"><![CDATA[<p>近3个月的STM（Starter Mission）接近尾声了，作为走出校园与正式步入职场的过渡期，总的来说，这段时间过的还算轻松。<br>生活上一改往日的赖床习惯，每天上午8点准时起床，这大概是我这几个月遇到最大的挑战，但是必须克服，毕竟迟到损失的是自己的真金白银呀。通常起床后闭着眼稀里糊涂地洗漱，然后将头发梳成大人模样，换上一身帅气西装（尽管西装革履，仍不时被认成商场保安或地产中介，大约是装备略低端，气质略屌丝的缘故吧），走路或骑共享单车到公司（偶尔撸一下饿了么的早餐羊毛），就开始了一天的工作。<br>项目上可以说几乎没有什么压力，两个开放题，想做的简单或困难完全凭自己决定，review能自圆其说就好。开发过程中网络是受限的，只能上几个白名单里的网址，哎，这就不好玩了。不过，曾经有位伟人说过，断网是效率的源泉，亲身体会告诉我，其实他说的还是有一点道理的。技术选型方面，公司做了很残酷的限定，基本可以说HTML+CSS+JavaScript裸奔 :)，框架库仅可使用jQuery和Bootstrap，数据库通过操控Local Storage模拟，无后端。之所以如此，是因为在STM期间，技术不作为主要考量，能够表达产品想法即可，重点还是在于产品思维的培养。其实从个人角度讲还是希望在技术方面有所进步，所以我想，既然近期工作靠近前端，何不借机好好学习下JavaScript呢？这门语言也是越来越厉害了，不管今后做什么方向，掌握好JavaScript总是有益无害的吧。不过没有项目驱动深入学习的话，多关注和夯实基础或许是当前最优解了。</p>
<p>尽管本菜鸡的成果物相当一般，但是值此STM结束之际，我还是想总结一下近期做了些什么事，留念也好，为规划今后技术学习提供参考也罢，总之能派上点用场。</p>
<h2 id="做了哪些工作"><a href="#做了哪些工作" class="headerlink" title="做了哪些工作"></a>做了哪些工作</h2><ul>
<li>产品视角<ul>
<li>Personal Information Management System<ul>
<li>代码量：64 commits during 29 days，2749 lines in total；</li>
<li>核心功能：表格分页；表列排序；表列拖拽；定制标签，绑定特定表结构，通过标签点击迅速完成表格切换；</li>
</ul>
</li>
<li>Inventory Management System<ul>
<li>代码量：184 commits during 55 days，5945 lines in total</li>
<li>核心功能：角色权限控制；库存审查；库存预警；库存迁移；购物车；销售采购订单管理；销售采购历史查询；数据统计和可视化；仓库管理；货架管理；搬运派单及抢单；</li>
</ul>
</li>
</ul>
</li>
<li>技术视角<ul>
<li>一堆整理之后看起来比较舒服的业务逻辑处理代码：每个页面分配一个<code>.js</code>，用立即执行函数包起来；</li>
<li>表格排序伪轮子：点击表格列头，则该表格数据将以该列为基础重新排序和渲染，升序降序可切换，伴有icon提示；</li>
<li>表格分页伪轮子：一次性把数据从数据库里全读出来，前端分页展示，水的很；</li>
<li>表列拖拽伪轮子：拖拽和释放列头，改变表格列及数据的显示顺序；</li>
<li>基于Canvas的乞丐版Charts伪轮子：支持画条形图，饼图，折线图，颜值非负，但可移植性低，毕竟新手造轮；</li>
<li>基于Canvas的条形码生成器：不完全抄袭自<a href="https://www.v2ex.com/t/106607" target="_blank" rel="external">V2EX某帖</a>，了解了条形码生成算法；</li>
</ul>
</li>
</ul>
<h2 id="看了哪些书籍和资料"><a href="#看了哪些书籍和资料" class="headerlink" title="看了哪些书籍和资料"></a>看了哪些书籍和资料</h2><ul>
<li>《JavaScript语言精髓与编程实践》：煦神的遗产，信煦神，会进步，本书前几章讲解的非常好，特别是如何遍历原型链的配图展示了无比清晰的思路；</li>
<li>《廖雪峰的JavaScript教程》：入门很简单，当时Git教程也是看的廖大佬的，想要迅速上手就看它；</li>
<li>《JavaScript秘密花园》：二刷，读研时花了一两天过了一遍，彼时没什么JavaScript基础，强刷导致没怎么看懂，大部分成了无效输入，这回再看，基本上都搞明白了；</li>
<li>《JavaScript语言精粹》：大名鼎鼎的蝴蝶书，很薄，没仔细看，只是从中了解一些名词方向，留着以后细品；</li>
<li>《Learn JavaScript Design Patterns》：极客学院上有中文翻译版本，中英文对照着看了一些，发现一些简单模式（如工厂模式）平时写代码时其实已经靠自己摸索出来了；</li>
<li>《JavaScript Document on StackOverflow》：开箱即用，值得信赖；</li>
<li>《RequireJS on iMooc》：本来想着把模块化引入到项目里，结果考虑到重构既劳心劳力又存在相当风险就放弃了；</li>
<li>《ES6标准入门》：阮一峰大佬的书，阮老师写书写博客还是很厉害的，干货蛮多的，刷起来不快，但是好懂；</li>
</ul>
<h2 id="读了哪些源码"><a href="#读了哪些源码" class="headerlink" title="读了哪些源码"></a>读了哪些源码</h2><ul>
<li>alasql.js，<a href="https://github.com/agershun/alasql" target="_blank" rel="external">GitHub</a>，一款比较小众的浏览器数据库；</li>
<li>collect.js，<a href="https://github.com/ecrmnn/collect.js" target="_blank" rel="external">GitHub</a>，目前已有2k+的star，尝试提issue和pull request；</li>
<li>一种基于Promises/A+规范的Promise实现，<a href="https://github.com/xieranmaya/blog/issues/3" target="_blank" rel="external">GitHub</a>；</li>
</ul>
<h2 id="学到了哪些东西"><a href="#学到了哪些东西" class="headerlink" title="学到了哪些东西"></a>学到了哪些东西</h2><ul>
<li>产品思维，STM主要侧重灌输这个，总结起来就是merit，logic，useful，bug free，beautiful；</li>
<li>Catalog，尽管之前写的很垃圾，现在起码知道了以后要怎么组织思路和文章，但是英文表达烂不是一朝一夕能逆袭的；</li>
<li>JavaScript，趁着STM有时间重新打了JavaScript地基，着重研究了原型链，闭包，函数式，Promise，模块化，一些简单常用的设计模式，本来接下来想玩Vue/React，但是估计马上就要进组干活了（应该是其他方向），等以后有时间再接触前端技术栈的时候大概Vue/React都已经过时啦 :)</li>
<li>还有一些零碎的东西，比如找到一款中意的Sublime主题（Glacier），提升了Coding体验等；</li>
</ul>
<h2 id="一些感慨"><a href="#一些感慨" class="headerlink" title="一些感慨"></a>一些感慨</h2><p>人呐，就都不知道，自己不可以预料，我一个信安硕士，手握SCI顶刊，怎么写起了JavaScript？老天爷说啦，凡人都生活在围城当中，从前做所谓的research觉得假大空，向往一些脚踏实地的纯工程，而现在写点业务又觉得没技术含量，期待玩一些前沿的东西。转念一想，我总是这样朝三暮四，浅尝辄止，所以导致现在还是一张白纸，什么都不会。有时候会羡慕其他同学，也会幻想要是我从本科开始就选择一个方向（大数据？后台？ML？无论什么）坚持深入钻研，持续到今天应该在某方面也蛮厉害的了吧？可惜没有如果，可惜了。不管来不来得及吧，是时候找个方向安定下来啦，择一技而终，保证足够的自我奋斗，希望能跟上历史的行程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近3个月的STM（Starter Mission）接近尾声了，作为走出校园与正式步入职场的过渡期，总的来说，这段时间过的还算轻松。&lt;br&gt;生活上一改往日的赖床习惯，每天上午8点准时起床，这大概是我这几个月遇到最大的挑战，但是必须克服，毕竟迟到损失的是自己的真金白银呀。通常起
    
    </summary>
    
      <category term="Work" scheme="http://yoursite.com/categories/Work/"/>
    
    
      <category term="WAP" scheme="http://yoursite.com/tags/WAP/"/>
    
  </entry>
  
  <entry>
    <title>2017年非上海生源应届毕业生申请上海户口指北</title>
    <link href="http://yoursite.com/2017/05/30/2017%E5%B9%B4%E9%9D%9E%E4%B8%8A%E6%B5%B7%E7%94%9F%E6%BA%90%E5%BA%94%E5%B1%8A%E6%AF%95%E4%B8%9A%E7%94%9F%E7%94%B3%E8%AF%B7%E4%B8%8A%E6%B5%B7%E6%88%B7%E5%8F%A3%E6%8C%87%E5%8C%97/"/>
    <id>http://yoursite.com/2017/05/30/2017年非上海生源应届毕业生申请上海户口指北/</id>
    <published>2017-05-30T14:34:07.000Z</published>
    <updated>2017-05-30T15:29:39.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请落户"><a href="#申请落户" class="headerlink" title="申请落户"></a>申请落户</h2><p>这个过程需要与高校行政部门打交道，是比较恶心的一个环节，看起来5分钟能搞定的事，很有可能因各种原因被耽误两三天。而对于非沪高校而言，整个过程不仅恶心，而且可控性低，快递来回费时费力，所以尽快着手签字盖章等事项，免得夜长梦多。</p>
<h3 id="申请材料包括"><a href="#申请材料包括" class="headerlink" title="申请材料包括"></a>申请材料包括</h3><ol>
<li>《2017年非上海生源应届普通高校毕业生进沪就业办理户籍申请表》（公司HR准备）；</li>
<li>《2017年非上海生源应届普通高校毕业生个人信息表》（双面打印，学校盖章）；</li>
<li>普通高等学校毕业生推荐表（学校发放）；</li>
<li>普通高等学校毕业生就业协议书（学校发放，三方个人联）；</li>
<li>成绩单（原件，学校盖章）；</li>
<li>外语等级证书（复印件，学校盖章，验原件）；</li>
<li>计算机等级证书（复印件，学校盖章，验原件，研究生不需要这项）；</li>
<li>用人单位企业营业执照（公司HR准备）；</li>
<li>最高学历学习阶段所获奖项证书（复印件，学校盖章，验原件）；</li>
<li>最高学历学习期间获得发明专利证书及相关材料；</li>
<li>最高学历学习期间创业的相关证明材料；</li>
<li>其他相关材料；</li>
</ol>
<h3 id="材料及学校各部门对应操作"><a href="#材料及学校各部门对应操作" class="headerlink" title="材料及学校各部门对应操作"></a>材料及学校各部门对应操作</h3><table>
<thead>
<tr>
<th></th>
<th>个人信息表</th>
<th>推荐表</th>
<th>三方</th>
<th>成绩单</th>
<th>外语等级证复印件</th>
<th>证书复印件</th>
</tr>
</thead>
<tbody>
<tr>
<td>学院教学干事</td>
<td>签字+盖章</td>
<td></td>
<td></td>
<td>盖章 o</td>
<td></td>
<td></td>
</tr>
<tr>
<td>学院领导</td>
<td>签字</td>
<td>签字</td>
<td>签字</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>学院章</td>
<td>盖章</td>
<td>盖章</td>
<td>盖章</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>研究生培养处</td>
<td>盖章</td>
<td></td>
<td></td>
<td>盖章</td>
<td>盖章 o</td>
<td>盖章 o</td>
</tr>
<tr>
<td>学校就业办公室</td>
<td>盖章</td>
<td>盖章</td>
<td>盖章</td>
<td></td>
<td>盖章</td>
<td>盖章</td>
</tr>
</tbody>
</table>
<p>o标记为非必须，本人为保险起见而多盖了这几个章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;申请落户&quot;&gt;&lt;a href=&quot;#申请落户&quot; class=&quot;headerlink&quot; title=&quot;申请落户&quot;&gt;&lt;/a&gt;申请落户&lt;/h2&gt;&lt;p&gt;这个过程需要与高校行政部门打交道，是比较恶心的一个环节，看起来5分钟能搞定的事，很有可能因各种原因被耽误两三天。而对于非沪高
    
    </summary>
    
      <category term="Life" scheme="http://yoursite.com/categories/Life/"/>
    
    
      <category term="Shanghai" scheme="http://yoursite.com/tags/Shanghai/"/>
    
  </entry>
  
  <entry>
    <title>Some minor customizations based on NexT</title>
    <link href="http://yoursite.com/2017/05/15/Some-minor-customizations-based-on-NexT/"/>
    <id>http://yoursite.com/2017/05/15/Some-minor-customizations-based-on-NexT/</id>
    <published>2017-05-15T13:55:03.000Z</published>
    <updated>2017-05-15T14:58:43.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Modify-the-square-avatar-to-circle"><a href="#Modify-the-square-avatar-to-circle" class="headerlink" title="Modify the square avatar to circle"></a>Modify the square avatar to circle</h2><ol>
<li>Open <code>\Blog\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code></li>
<li>You can find <code>CSS</code> codes of class <code>site-autor-image</code>, modify it as follows<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</div><div class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</div><div class="line">  <span class="attribute">height</span>: $site-author-image-height;</div><div class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Modify-collection-title’s-margin"><a href="#Modify-collection-title’s-margin" class="headerlink" title="Modify collection title’s margin"></a>Modify collection title’s margin</h2><p>If we set <code>h2</code> as the size of <code>collection-title</code>, it will have <code>margin-left</code> attribute automatically on account of original configuration in themes. Other sizes does not set <code>margin-left</code> attribute and show unfriendly style. The NexT only gives <code>SEO optimization</code> <code>h2</code> privilege, we update source codes to disable this feature. Take <code>tags</code> page as an example.</p>
<ol>
<li>Open <code>\Blog\themes\next\layout\tag.swig</code></li>
<li><p>You can find codes as below</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collection-title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">&#123;%</span> <span class="attr">if</span> <span class="attr">theme.seo</span> %&#125;<span class="attr">h2</span>&#123;% <span class="attr">else</span> %&#125;<span class="attr">h1</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>&#123;#</div><div class="line">    #&#125;&#123;&#123; page.tag &#125;&#125;&#123;#</div><div class="line">    #&#125;<span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;  __('title.tag')  &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">&#123;%</span> <span class="attr">if</span> <span class="attr">theme.seo</span> %&#125;<span class="attr">h2</span>&#123;% <span class="attr">else</span> %&#125;<span class="attr">h1</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p> We make a very lazy modification as follows. It is really stupid, but it works.</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collection-title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">&#123;%</span> <span class="attr">if</span> <span class="attr">theme.seo</span> %&#125;<span class="attr">h2</span>&#123;% <span class="attr">else</span> %&#125;<span class="attr">h2</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span>&#123;#</div><div class="line">    #&#125;&#123;&#123; page.tag &#125;&#125;&#123;#</div><div class="line">    #&#125;<span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;  __('title.tag')  &#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">&#123;%</span> <span class="attr">if</span> <span class="attr">theme.seo</span> %&#125;<span class="attr">h2</span>&#123;% <span class="attr">else</span> %&#125;<span class="attr">h2</span>&#123;% <span class="attr">endif</span> %&#125;&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Modify-the-square-avatar-to-circle&quot;&gt;&lt;a href=&quot;#Modify-the-square-avatar-to-circle&quot; class=&quot;headerlink&quot; title=&quot;Modify the square avatar
    
    </summary>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo together with Github.io</title>
    <link href="http://yoursite.com/2017/05/14/Hexo-together-with-Github-io/"/>
    <id>http://yoursite.com/2017/05/14/Hexo-together-with-Github-io/</id>
    <published>2017-05-14T10:26:04.000Z</published>
    <updated>2017-05-15T14:58:46.267Z</updated>
    
    <content type="html"><![CDATA[<p>Most programmers have their own blog. I come across an article in Zhihu today, guiding user to setup blog with the help of Hexo and Github.io. I follow that article, so this blog was born.</p>
<p>I summarize steps briefly as below.</p>
<ol>
<li>create repo (username.github.io)</li>
<li>install git<ul>
<li>config global username and email</li>
<li>config ssh</li>
</ul>
</li>
<li>install node.js (npm attached)<ul>
<li>install on Win is easy</li>
<li>use <code>node -v</code> to check if node.js install success</li>
<li>use <code>npm -v</code> to check if npm install success</li>
</ul>
</li>
<li>create blog folder</li>
<li>install Hexo<ul>
<li><code>npm install -g hexo-cli</code></li>
</ul>
</li>
<li>Hexo commands<ul>
<li>init blog <code>hexo init</code></li>
<li>new article <code>hexo new article_name</code></li>
<li>generate blog <code>hexo g</code> == <code>hexo generate</code></li>
<li>preview blog at the local <code>hexo s</code> == <code>hexo server</code></li>
<li>change IP <code>hexo server -i ip_addr</code></li>
<li>change port <code>hexo server -p new_port</code></li>
<li>deploy blog <code>hexo d</code> == <code>hexo deploy</code></li>
<li>clean cache <code>hexo clean</code></li>
</ul>
</li>
<li>Hexo deploy steps<ol>
<li>modify <code>_config.yml</code> in root path</li>
<li>install plug-in <code>npm install hexo-deployer-git --save</code></li>
<li>hexo clean, generate and deploy in order</li>
</ol>
</li>
<li>choose your favorite Hexo theme</li>
<li>learn some Markdown grammar to write blogs</li>
</ol>
<p>When I deploy Hexo, there are some problems. If you use <code>cmd</code> to deploy, you have to set environment variable of <code>git</code>, or you can use <code>git bash</code> instead of <code>cmd</code>. If you meet error that <code>bash: /dev/tty: No such device or address</code>, maybe you can change <code>repo</code> value from <code>https</code> address to <code>ssh</code> address in <code>root\_config.yml</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Most programmers have their own blog. I come across an article in Zhihu today, guiding user to setup blog with the help of Hexo and Githu
    
    </summary>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
